@startuml
'https://plantuml.com/class-diagram

package controller {
    class PlayerController {
        -player : IPlayer
        -command : Command
        +PlayerController(IDisplay, IWorld) : void
        +setCommand(Command) : void
        -bindListeners(IDisplay) : void

        -Flap() : void
        -MoveLeft() : void
        -MoveRight() : void
    }

}

package Assets {
    class PixelArt {}
    class Sound {}
    class Animation {}

}


package view {

    interface IDisplayState {
        onEnterState(displayState) : void

    }

    class stateMenu {
        onEnterState(displayState) : void
        + render(Graphics) : void
    }

    class stateInGame {
        onEnterState(displayState) : void
        + render(Graphics) : void

    }

    class stateCredits {
        onEnterState(displayState) : void
        + render(Graphics) : void

    }

    abstract Display {
        - jframe : JFrame
        - canvas : Canvas
        + render(Graphics) : void
    }


}



package Observers {
    class KeyPress {
        +attach(KeyObserver) : void
        +detach(KeyObserver) : void
        +notify() : void
     }

    interface ObserveKey {
        +attach(KeyObserver) : void
        +detach(KeyObserver) : void
        +notify() : void
    }


    interface KeyObserver {
        +buttonEvent(KeyEvent) : void

    }

    interface ICollisionObserver {
        onBump(Entity) : void
    }


}

package BalloonBattleApp {
    class Game {
        +controller : PlayerController
        +player : Player
        +Enemies : List<Enemy>
        -gameState : GameState
        +run() : void
        +stop() : void
        +isRunning() : boolean
        #bindInputObservers() : void
        #bindWorldObservers() : void

        #renderFrame() : void
    }

    enum GameState {
        MENU
        GAME
        WON
        LOST
    }
}

package model {
    class Balloon {
        -isPopped : boolean

    }

    package player {
        class InAirState {
            +InAirState(Player)
            +onEnterState() : void
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void

        }

        class OnGroundState {
            +OnGroundState(Player)
            +onEnterState() : void
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void
        }

        interface IPlayerState {
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void

            +onEnterState() : void
        }

        abstract Player {
            -state : PlayerState
            +changeStateTo(State) : void
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void
        }

    }


    package enemies {

        abstract Enemy {}

        class HostileEntity {}


    }

    interface IMovable {
        -moveLeft() : void
        -moveRight() : void
        -flap() : void
    }

    abstract Entity {
        - state : State

    }

    enum Direction {
        LEFT
        RIGHT
    }




    package levels {
        class Level {
        + render() : void
        + getPlatforms : ArrayList<Platform>
        + isPlayerOnPlatform() : boolean
        + setPlayerOnPlatform(boolean) : void
        + tick() : void
        }
            class Platform {}
    }

    abstract Item {
        # x : int
        # y : int
        # width : int
        # height : int
        # hitbox : Rectangle
        {abstract} + tick() : void
        {abstract} + render(Graphics) : void
    }

    class Game {
        - levels : List<Level>
        - player : Player
        - enemies : List<Enemy>
    }
    package CollisionDetection {
        class Collision{

        }
    }
}


Game --|> PlayerController


Game --+ GameState
Entity --+ Direction


Player --> IPlayerState
Enemy *--> Balloon


IPlayerState <|... InAirState
IPlayerState <|... OnGroundState

Enemy --> HostileEntity
HostileEntity ---> Entity

Display --> IDisplayState
IDisplayState <|.. stateMenu
IDisplayState <|.. stateCredits
IDisplayState <|.. stateInGame


ObserveKey <... KeyPress
KeyObserver <... KeyEvent

@enduml