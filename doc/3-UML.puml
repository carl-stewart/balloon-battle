@startuml
'https://plantuml.com/class-diagram

package BallonBattleApp {
    abstract GameLoop {
        +run() : void
        +stop() : void
        +isRunning() : boolean
        #bindInputObservers() : void
        #bindWorldObservers() : void

        #renderFrame() : void
    }
}

package Observers {

    interface ActionListener {
        + actionPerformed(KeyEvent) : void
    }

    interface KeyListener {
        +button_a(KeyEvent) : void
        +button_b(keyEvent) : void
        +button_left(KeyEvent) : void
        +button_right(KeyEvent) : void
    }

}


package model {
    class Balloon {
        -isPopped : boolean

    }

    Balloon ..> CollisionDetection

    package state {
        class InAirState {
            -player : Player
            +InAirState(Player)
            +onEnterState() : void
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void

        }

        class OnGroundState {
            -player : Player
            +OnGroundState(Player)
            +onEnterState() : void
            +Flap() : void
            +MoveLeft() : void
            +MoveRight() : void
        }
    }

    interface BehaviourState {
        +onEnterState() : void
    }

    class Player {
        -state : BehaviourState
        +Player()
        +changeStateTo(State) : void
    }

    Player ---> BehaviourState
    InAirState ..|> BehaviourState
    OnGroundState ..|> BehaviourState
    InAirState ---> Player
    OnGroundState ---> Player

    Player *--> Balloon
    Player --|> CollisionDetection
    HostileEntity --|> CollisionDetection

    Enemy *--> Balloon



    class Enemy {}

    class HostileEntity {}

    Enemy --> HostileEntity
    HostileEntity ---> Entity


    interface IMovable {
        -moveLeft() : void
        -moveRight() : void
        -flap() : void
    }

    Player ...> IMovable

    abstract Entity {
        - state : State

    }

    enum Direction {
        LEFT
        RIGHT
    }


    interface Command {
        +execute() : void
    }

    class Flap{
        +execute() : void
    }

    class MoveLeft {
        +execute() : void
    }

    class MoveRight {
            +execute() : void
    }

    Entity --+ Direction

    Flap ..|> Command
    MoveLeft ..|> Command
    MoveRight ..|> Command



    enum GameState {
        MENU
        GAME
        WON
        LOST
    }

    package levels {
        class Level {
        + render() : void
        + getPlatforms : ArrayList<Platform>
        + isPlayerOnPlatform() : boolean
        + setPlayerOnPlatform(boolean) : void
        + tick() : void
        }
            class Platform {}
    }

    abstract Item {
        # x : int
        # y : int
        # width : int
        # height : int
        # hitbox : Rectangle
        {abstract} + tick() : void
        {abstract} + render(Graphics) : void
    }

    class Game {
        - levels : List<Level>
        - player : Player
        - enemies : List<Enemy>
    }

    class CollisionDetection {

    }
}

package view {

    interface IDisplay {}

    class GamePlay {
        - jframe : JFrame
        - canvas : Canvas
    }

    class Menu {
        - jframe : JFrame
        - canvas : Canvas
    }

    abstract IDisplay {
        - jFrame : JFrame
        - canvas : Canvas
    }

}

package controller {
    class PlayerController {
        -player : IPlayer
        +PlayerController(IDisplay, IWorld) : void
        -bindListeners(IDisplay) : void
        -Flap(Command) : void
        -MoveLeft(Command) : void
        -MoveRight(Command) : void
    }

}

package Assets {

}

Player ---> Entity


PlayerController ..> Command

@enduml